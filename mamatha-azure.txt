Cloud: The cloud is a distributed collection of servers that hosts software and infrastructure, and it is accessed over the internet.
Cloud Computing: Cloud computing refers to the on-demand availability of computing resources, such as data storage, servers, networking capabilities, and software, over the internet.
Cloud computing enables various operations such as:
    Developing new applications and services
    Storage, backup, and recovery of data
    Hosting blogs and websites
    Delivery of software on demand
Benefits of Cloud Computing :
    Cost Savings – Pay only for what you use without investing in physical hardware.
    Scalability – Instantly scale resources up or down based on demand.
    Performance – Reduced latency and improved application performance.
    Reliability – Easier and cost-effective backup and disaster recovery.
    Productivity – Reduces IT management overhead and setup time.
    Security – Offers strong protection for data and applications against threats.
Cloud Deployment Models:
    A cloud deployment model fundamentally determines where the infrastructure for your deployment exists and who owns and controls that infrastructure. It also          figures out the nature and intention of the cloud.
Public Cloud:
    In a public cloud, computing resources such as servers, storage, and applications are owned and operated by a third-party cloud service provider and delivered 
    over the internet.
Advantages of Public Cloud : Minimal Investment, No Setup Cost, No Infrastructure Management, No Maintenance, Dynamic Scalability
Disadvantages of Public Cloud :Less Secure, Low Customization, Limited Control, Compliance Issues.
Private Cloud:
    A Private Cloud is a secure, isolated cloud environment dedicated to a single organization, offering exclusive access to computing resources. It can be hosted        on- premises or by a third-party, and is managed internally or externally, providing enhanced control, security, and customization.
Key Characteristics of Private Cloud: Exclusive Use, Enhanced Security, Customization, Compliance-Friendly 
Advantages: Better Control, Data Security & Privacy, Legacy System Support, Customization  Disadvantages: Less Scalable, Costly.
Hybrid Cloud: 
    A Hybrid Cloud is a combination of both public and private clouds, allowing data and applications to be shared between them. It offers the flexibility to run         sensitive workloads in the private cloud while leveraging the scalability and cost-effectiveness of the public cloud.
Advantages of the Hybrid Cloud Model: Flexibility and Control, Cost Efficiency, Security 
Disadvantages of the Hybrid Cloud Model: Complex Management, Latency Issues.
Community Cloud:
    A Community Cloud is a cloud infrastructure shared by several organizations with similar requirements (e.g., compliance, mission, or security). It can be managed     by one or more organizations or a third party.
Advantages: Cost Effective, Enhanced Security, Resource Sharing | Disadvantages: Limited Scalability, Less Customization
Multi-Cloud:
    Multi-Cloud is a cloud strategy where an organization uses services from multiple public cloud providers (like AWS, Azure, GCP) to distribute workloads and avoid     dependency on a single vendor.
Advantages: Reduced Latency, High Availability | Disadvantages: Complex Management, Security Risks.
Cloud Computing Services:
Infrastructure as a Service (IaaS) :
    Is a cloud computing model that delivers virtualized computing resources—like servers, storage, and networking—over the internet. It eliminates the need for         organizations to own physical hardware. Infrastructure as a Service (IaaS) is a cloud computing service model that provides virtualized computing resources over      the internet. In an IaaS model, organizations access and manage fundamental IT resources—such as virtual machines, storage, networks, and operating systems—on        demand from a cloud provider. This eliminates the need for organizations to invest in and maintain their own physical IT infrastructure.
Key Characteristics of IaaS: 
    Resources as a Service, Pay-as-you-go Pricing, Scalability, Self-Service Provisioning, Virtualization, Multi-tenancy 
Benefits of IaaS: 
    Cost Reduction, Scalability and Flexibility, Faster Deployment, Increased Reliability and Availability, Focus on Core Business, Global Reach, Business Continuity and Disaster Recovery 
Challenges of IaaS: 
    Security, Compliance, Integration with Existing Systems, Dependency on Provider, Managing Costs, Limited Control, Vendor Lock-in
Common Use Cases for IaaS:
    Web Hosting, Test and Development Environments, Data Storage Backup and Recovery, High-Performance Computing (HPC), Big Data Analytics, Virtual Data Centers, Business Continuity and Disaster Recovery.
Examples of IaaS Providers: 
    AWS, Microsoft Azure, Google Cloud Platform (GCP), DigitalOcean, Linode, Rackspace, IBM Cloud, Alibaba Cloud, Oracle Cloud
Platform as a Service:
    Platform as a Service (PaaS) provides a cloud-based runtime environment where developers can build, test, deploy, and manage applications without handling the        underlying infrastructure. The platform handles hardware, OS, networking, storage, and scalability.
Key Characteristics of PaaS: 
    Complete Development and Deployment Environment, Focus on Application Development, Built-in Scalability and Availability, Support for Multiple Programming 
Benefits of PaaS: 
    Accelerated Development Cycles, Reduced Complexity, Lower Costs, Scalability and High Availability,  Improved Collaboration, Faster Time to Market, Automatic Updates and Patching 
Challenges of PaaS:
    Vendor Lock-in, Limited Control, Security Concerns, Integration with Existing Systems, Customization Limitations, Performance Issues
Common Use Cases for PaaS: 
    Web Application Development and Hosting, Mobile Application Development, API Development and Management, Data Analytics and Business Intelligence, Stream Processing, IoT Application Development, Team Collaboration and Workflow Automation |
Examples of PaaS Providers: 
    AWS Elastic Beanstalk, Google App Engine, Microsoft Azure App Service, Heroku, OpenShift, Cloud Foundry, Engine Yard, Mendix, OutSystems
Software as a Service (SaaS) :
    SaaS is also known as "On-Demand Software". It is a software distribution model in which applications are hosted by a cloud service provider and made available       to users over the internet. SaaS eliminates the need for organizations to install, maintain, or manage software locally.
Key Characteristics of SaaS: 
    Web-Based Access, Centralized Hosting, Subscription-Based Pricing, No Infrastructure Management, Automatic Updates and Patching, Scalability and Flexibility, Accessibility from Anywhere, Multi-tenancy Architecture 
Benefits of SaaS: 
    Lower Upfront Costs, Reduced IT Overhead, Faster Implementation, Automatic Updates and Maintenance, Scalability and Flexibility, Accessibility, 
Challenges of SaaS: 
    Data Security and Privacy, Vendor Lock-in, Limited Customization, Integration Issues, Dependency on Internet Connectivity, Control Over Features 
Common Use Cases for SaaS: 
    Customer Relationship Management (CRM), Enterprise Resource Planning (ERP), Email and Collaboration, Office Productivity Suites, Human Resources Management           (HRM), Content Management Systems (CMS), Project Management, Accounting Software, Marketing Automation, Video Conferencing 
Examples of SaaS Providers: 
    Salesforce, Microsoft, Google, Adobe, Zoom, Dropbox, Slack, ServiceNow, Atlassian, Oracle
XaaS (Anything as a Service):
    A broad term that refers to delivering anything as a service over the internet, including IaaS, PaaS, SaaS, and more.
Advantages:
    Scalable to changing needs, Flexible across various IT services, Cost-effective, pay-as-you-go
Disadvantages:
    Vendor dependency, Limited flexibility for unique workloads, Integration issues with legacy systems
FaaS (Function as a Service):
    A serverless model where small pieces of code (functions) run in response to events, without managing infrastructure.
Advantages:
    Highly scalable & cost-effective, No server management, Write functions in any language, Great for microservices and event-driven apps

Disadvantages:
    Cold start latency, Limited infrastructure control, Security & scalability concerns
Example Use Case: 
    Image resizing in a photo app when a file is uploaded.
Popular Providers: 
    AWS Lambda, Google Cloud Functions, Azure Functions, IBM OpenWhisk
Security Concerns in IaaS, PaaS, and SaaS
IaaS Security Risks:
IaaS exposes more of the infrastructure to users, which means managing the operating system, applications, and network security is the user's responsibility.
Common Attacks:
    Data breaches
    Denial-of-service (DoS) attacks
    Vulnerabilities in virtual machine configurations
PaaS Security Risks:
In PaaS, security is shared between the cloud provider and the customer. While the cloud provider manages the infrastructure, the customer needs to focus on securing their application and data.
Common Attacks:
    Misconfiguration vulnerabilities
    Insufficient authentication and authorization
    API security risks
SaaS Security Risks:
SaaS models have the least amount of user control, as the application is fully managed by the provider. However, there are still potential security concerns related to user data and access management.
Common Attacks:
    Data leakage
    Account hijacking
    Service interruptions due to cyberattacks
Functional Requirements (FR):
Functional requirements specify what a system should do. They describe the specific behaviors, actions, or functions the system must have to meet the needs of its users. Essentially, functional requirements define the capabilities of the system.
Characteristics of Functional Requirements:
    Focus on specific actions or operations of the system.
    Can be expressed as user stories or use cases.
    Directly related to the system's core functionality.
Non-Functional Requirements (NFR):
Non-functional requirements specify how a system performs its functions. They define the quality attributes and operational aspects of the system, such as its performance, scalability, security, and availability. These requirements help ensure the system works effectively and meets the users' expectations in terms of system qualities.
Examples of Non-Functional Requirements:
    Performance: The system must handle 1000 concurrent users without degradation in speed.
    Scalability: The system must be able to scale horizontally to support a growing number of users.
    Availability: The system must have 99.9% uptime.
    Security: The system must encrypt sensitive user data using AES-256 encryption.
    Usability: The system’s user interface must be simple and intuitive for new users.
Compile-Time Caching:
    Compile-time caching stores pre-compiled assets or intermediate build results (like Java bytecode, bundled JavaScript, or optimized images) during the build process.
Benefits:
    Faster builds.
    Efficient resource usage.
    Reduces build time across environments and teams.
Runtime Caching:
    Runtime caching refers to storing data during application execution, so it doesn't need to be fetched or recalculated repeatedly.
Benefits:
    Better performance.
    Reduced server load.
    Improved scalability.
Alpine Linux:
    Alpine Linux is a security-oriented, lightweight Linux distribution designed for power users who need performance and simplicity. It is musl libc- and BusyBox-based, making it extremely small and efficient.
Common Use Cases:
    Microservices in containers (e.g., Go, Node.js, Python apps).
    CI/CD tools and pipelines.
    Serverless functions (custom containers).
    Lightweight VMs in edge computing.
Feature Benefit
    Small Image Size : Typically ~5 MB, reducing image size and speeding up pulls.
    Minimal Packages : Only the essentials, reducing attack surface.
    Security Focused : Hardened kernel, PaX, grsecurity patches (historically).
    Customizability : Easy to extend and build from.
NSG(Network Security Group):
    NSG (Network Security Group) is a security feature in Microsoft Azure that acts as a virtual firewall to control inbound and outbound traffic to Azure resources      at the network level.
    NSGs allow or deny traffic based on rules like source/destination IP addresses, ports, and protocols.
Where NSGs are Applied: NSGs can be associated with:
    Network Interfaces (NICs) – for controlling traffic to individual virtual machines.
    Subnets – for controlling traffic to all resources in the subnet.
NSG Rule Key Components: Name, Priority, Direction, Access, Protocol, Source, Source Port Range, Destination, Destination Port Range.
Best Practices for NSGs: Least Privilege, Subnet-Level NSGs, NIC-Level NSGs, Avoid Conflicting Rules, Log and Monitor, Use Service Tags, Use Application Security Groups (ASGs).
pplication Security Groups (ASGs): Group VMs logically and apply rules to ASGs instead of IPs.

Types of Kubernetes Scaling :
    Scaling in Kubernetes ensures your application runs smoothly under varying workloads by adjusting pods or nodes automatically or manually.
There are three main types of scaling:
1. Horizontal Pod Autoscaler (HPA)
2. Vertical Pod Autoscaler (VPA)
3. Cluster Autoscaler
Horizontal Pod Autoscaler (HPA):
What it does:
    Automatically increases or decreases the number of pod replicas based on resource utilization or custom metrics.
Metrics Used:
    CPU utilization (default)
    Memory (via custom metrics adapter)
    Custom metrics (e.g., queue length, request rate)
Components Required:
    Metrics Server (must be installed in the cluster)
    Deployment or StatefulSet with resources.requests.cpu and resources.limits.cpu defined
How it works:
    HPA controller checks metrics every 15 seconds (configurable).
    Compares current usage with the target average utilization.
    Adjusts the number of replicas in the deployment.
Vertical Pod Autoscaler (VPA):
What it does:
    Automatically adjusts the CPU and memory requests/limits for a pod.
Why Use It:
    When app performance depends more on pod capacity per instance rather than number of pods.
    Ideal for batch jobs, stateful apps, or low request-volume services.
How it works:
    Monitors usage patterns over time
    Recommends or applies updated resource requests
    Can evict and restart pods with the new values
Cluster Autoscaler:
What it does:
    Automatically adds/removes nodes to/from the Kubernetes cluster based on unschedulable pods.
Why Use It:
    Helps save costs in cloud environments (e.g., AWS, GCP, Azure) by adjusting the size of the cluster dynamically.
Requirements:
    Must be deployed separately in the cluster
    Needs cloud provider support (e.g., auto-scaling groups on AWS EC2)
How it works:
    Periodically checks if any pods are in a Pending state due to lack of resources.
    If yes, adds more nodes (up to a max limit).
    If nodes are underutilized for a long time, it scales them down.



24-04-2025
Azure Tenants: 
  An Azure Tenant is a dedicated, isolated instance of Azure Active Directory (Azure AD) assigned to an organization when it signs up for Azure, Microsoft 365, or other Microsoft services.
  It manages users, groups, devices, policies, and apps.
  Tenant = Identity boundary (Who can log in, what they can access).
  Identity services used by Azure and Microsoft services for authentication and authorization.
Features of Azure Tenants (Short)
  Isolation: Every tenant is securely separated from others.
  Authentication and Identity Management: Manages users, groups, apps, MFA, SSO.
  Multi-Subscription Support: Multiple Azure subscriptions under one tenant.
  Conditional Access: Apply security rules based on conditions.
  RBAC: Fine-grained access control to Azure resources.
Benefits of Azure Tenants (Short)
  Security and Isolation: Ensures data privacy.
  Centralized Management: Single place for managing identities and policies.
  Single Sign-On: One login for multiple services.
  Resource Management: Organize resources easily with multiple subscriptions.
  Collaboration: Work securely with external users.
  Scalability: Easily adjust to business growth.
  Compliance: Helps meet security and regulatory requirements.
Data Centers:A data center is a physical facility used by organizations to house their critical IT systems and infrastructure, including servers, storage devices, networking equipment, and software applications. These centers ensure that business operations run smoothly by providing the computing resources necessary to handle a vast amount of data processing, storage, and management.
Key Components of a Data Center:
  Servers: High-performance computers responsible for processing and storing data.
  Storage Devices: Hard drives, SSDs, or arrays to store large volumes of data.
  Networking Equipment: Switches, routers, and firewalls that connect servers and manage data traffic.
  Cooling Systems: Air conditioning or liquid cooling systems to prevent equipment overheating.
  Power Supply: Backup generators, batteries, and redundant power systems to ensure uninterrupted operations.
  Security: Physical and cybersecurity measures to protect both the hardware and the data within the facility.
Types of Data Centers:
  Enterprise Data Centers: Built and operated by individual companies for their own use.
  Colocation Data Centers: A third-party facility where companies rent space and resources.
  Cloud Data Centers: Managed by cloud service providers like AWS, Microsoft Azure, and Google Cloud. 
Benefits of Data Centers:
  Scalability
  Security
  Data Redundancy
  Compliance
  Cost Efficiency
Key Considerations When Choosing a Data Center:
  Location
  Security
  Network Connectivity
  Redundancy and Backup
  Energy Efficiency
Azure Regional Pairs:
  Azure Regional Pairs refer to the pairing of two Azure data centers located within the same geographic region or area, usually within 300 miles of each other. Each Azure region is paired with another for the purpose of providing high availability, disaster recovery, and data residency.
  Pairing ensures that if one data center or region faces an outage, the services in the other paired region can continue to operate with minimal disruption.
Key Features of Azure Regional Pairs:
    High Availability
    Disaster Recovery
    Data Residency and Compliance
    Synchronous Data Replication
    Automatic Failover
    Service Boundaries
Examples of Azure Regional Pairs:  East US & West US, North Europe & West Europe, and Central India & South India.
Benefits of Azure Regional Pairs:
    Reliability: Redundancy through distribution of workloads between physically separate locations.
    Business Continuity: Enables service failover during unplanned disruptions.
    Cost Efficiency: Disaster recovery can be optimized without separate infrastructure investments.
    Reduced Latency: Paired regions within 300 miles offer low-latency data transfer.
    Compliance & Residency: Helps meet legal/regulatory standards for data storage.
Choosing a Regional Pair:
    Compliance Requirements: Ensure data storage meets regulatory requirements in specific regions.
    Proximity to End-Users: Choose a region closer to your target audience to reduce latency.
    Cost Implications: Balance costs associated with inter-region data transfer and redundancy.
Azure Global Network "
    Is a high-performance, low-latency, and highly resilient network that connects Azure’s global data centers, ensuring seamless communication across regions. It provides the foundation for Azure’s services and enables global applications to scale efficiently, with enhanced performance, security, and availability.
Key Features of Azure Global Network:
    Global Connectivity: Fast, secure data transfer across 60+ regions.
    Private Connectivity: Low-latency, private connections bypassing the public internet.
    ExpressRoute: Dedicated private connections for better security and performance.
    Content Delivery Network (CDN): Low-latency content delivery with global caching.
    Traffic Routing: Optimized routing using public and private networks.
    Security: Multi-layered security with DDoS protection.
Benefits of Azure Global Network:
    Improved Performance: Optimized for global applications.
    Reliability: High availability and fault tolerance.
    Scalability: Scales applications globally without compromising speed.
    Cost Efficiency: Reduced latency and operational costs.
    Enhanced Security: Protection against network threats.
Edge Locations in Azure?
In Azure, Edge Locations are physical data centers in Azure's Content Delivery Network (CDN). They are strategically placed across various geographical regions to improve performance by caching and delivering content closer to users.
Purpose of Edge Locations:
Edge locations optimize the delivery of content, reduce latency, and improve the overall user experience by caching static content like images, videos, and other web assets.
Role in Azure CDN:
Edge locations serve as key components of Azure's CDN, allowing for content caching and quick retrieval from the nearest location to the end user, enhancing performance for global applications.
Benefits of Edge Locations:
    Low Latency: Content is delivered from the nearest edge location, reducing load times.
    High Availability: Edge locations help improve content availability by distributing it globally.
    Cost Efficiency: Reduces the load on origin servers and reduces bandwidth costs.
Use Cases for Edge Locations:
    Video Streaming: Distributing high-quality video content with minimal buffering.
    Web Acceleration: Speeding up the delivery of websites and applications to users globally.
    Global Content Delivery: Serving static files and assets to users around the world without overloading the central server.
Key Features of Edge Locations:
    Caching: Temporary storage of frequently accessed content for faster retrieval.
    Intelligent Routing: Azure Traffic Manager and Azure Front Door route requests to the nearest edge location based on user proximity.
    Security: Protection through features like DDoS protection and Web Application Firewall (WAF) at edge locations.
Azure Resource Group:
    Is a logical container used to organize and manage related Azure resources. It allows you to group resources that share the same lifecycle, such as virtual machines, databases, networking components, and storage accounts.
Characteristics of Azure Resource Group:
    Logical Container
    Unified Management
    Location of Resources
    Lifecycle
    Tagging
Benefits of Azure Resource Groups:
    Simplified Resource Management
    Access Control
    Resource Organization
    Cost Management
    Template Support
    Security
How to Manage Resource Groups:
    Azure Portal:
        -Create and manage
        -Assign Permissions
        -Monitor resources
Azure Resource Manager (ARM):
    Is the deployment and management service for Azure. It provides a consistent management layer that allows you to create, update, and delete resources in your Azure account in a structured, automated, and secure way.
Key Features of Azure Resource Manager (ARM)
    Unified Management Layer
    Declarative Templates (ARM Templates)
    Role-Based Access Control (RBAC)
    Resource Group Management
    Tagging Support
    Dependency Management
    Consistent Deployment
Benefits of Azure Resource Manager
    Automation
    Consistency
    Security
    Monitoring
    Tagging & Cost Control
Azure Bicep
    Azure Bicep is a Domain Specific Language (DSL) for deploying Azure resources. It is a more concise, readable alternative to ARM (Azure Resource Manager) templates, designed to simplify the process of writing and managing Infrastructure as Code (IaC) in Azure.
Features of Bicep :
    Readable Syntax: YAML-like clarity, but strongly typed.
    Modular: Use module keyword to reuse code.
    Built-in Type Safety and IntelliSense.
    Automatic Dependency Handling
    Source Control Friendly
    Tooling: Great support in Visual Studio Code
    Azure Subscriptions – Complete Guide
Benefits of Azure Bicep:
    Increased Productivity: Simplified syntax allows faster infrastructure code development.
    Enhanced Readability: Bicep's concise syntax improves code clarity and maintenance.
    Native Integration: Seamlessly integrates with Azure’s deployment tools and services.
    Improved Code Quality: Linting, strong typing, and modules help improve code quality.
    Compatibility: Generates ARM templates compatible with existing Azure tooling.
How to Use Azure Bicep:
    Install Bicep CLI: Install the Bicep CLI tool via Azure CLI or from GitHub.
    Write a Bicep File: Create a .bicep file to define infrastructure resources.
    Compile to ARM Template: Use the Bicep CLI to convert the .bicep file to an ARM template.
    Deploy with Azure CLI: Deploy the ARM template using Azure CLI, PowerShell, or the Azure Portal.
Azure Subscriptions: An Azure subscription is an agreement with Microsoft to use Azure services, which acts as a container for managing and organizing resources, billing, and access control. It provides a logical boundary for Azure services, and each subscription has its own billing, resource limits, and access permissions.
Why Azure Subscriptions Are Necessary: Azure subscriptions are necessary to organize, manage, and allocate resources effectively, ensuring proper billing, access control, and resource management. They also provide a structure for applying quotas and limits to prevent overuse of resources.
Types of Azure Subscriptions: 
    Pay-As-You-Go
    Enterprise Agreement (EA)
    Cloud Solution Provider (CSP)
    Microsoft Customer Agreement (MCA)
    Dev/Test Subscription
    Visual Studio Subscription
Managing Azure Subscriptions: 
    Azure Portal
    Azure CLI/PowerShell
    Azure Cost Management
    Role-Based Access Control (RBAC)
    Subscription Management API
Azure Account:
    An Azure account is the basic entity used to access Azure services and manage resources. It is associated with a user identity and provides access to various         Azure services, subscriptions, and billing.
    It allows you to manage resources, monitor usage, set up billing, and access services like VMs, storage, networking, databases, and more.
Key Components of an Azure Account:
    Microsoft Account or Work/School Account
      - Your identity to sign in (like yourname@outlook.com or yourorg.com account).
    Azure Subscription
      - A container for billing, services, and resource management.
      - You can have multiple subscriptions under one Azure account.
      -	Each subscription has resource quotas, billing details, and role-based access control (RBAC).
    Directory (Microsoft Entra ID)
        - Azure uses Microsoft Entra ID (formerly Azure AD) to manage users and access across subscriptions and resources.
Azure Billing:
    Azure billing refers to the process of charging for the usage of Azure services based on consumption. It includes tools to manage subscription costs, track           usage, and generate invoices for Azure services consumed.
Important Azure Billing Tools:
      Cost Analysis: Visualizes where you’re spending money (by service, region, resource).
      Budgets and Alerts: Set spending limits and get alerts when you approach them.
      Invoices & Usage Reports: Download detailed usage and invoice data.
Azure Pricing Calculator:
    The Azure Pricing Calculator is a web-based tool that helps estimate the cost of Azure services based on different configurations and usage patterns. It allows       users to select specific services, set usage parameters, and calculate projected costs.
Key Features of Azure Pricing Calculator:
    Comprehensive Service Selection
    Cost Estimation and Comparison
    Customizable Configurations
    Interactive Pricing
    Export Pricing Estimate
Benefits of Using Azure Pricing Calculator:
    Cost Estimation Accuracy
    Budgeting and Financial Planning
    Scenario Testing
    Optimizing Resource Usage
    Managing Multiple Azure Subscriptions
How to Use Azure Pricing Calculator:
    Selecting Azure Services
    Configuring Resources
    Viewing Pricing Breakdown
    Saving and Sharing Estimates
How to Access the Azure Pricing Calculator:
    Via Azure Portal
    Using Direct URL
Example Use:
If we want to estimate the cost of running a Virtual Machine:
    1.	Go to the Azure Pricing Calculator
    2.	Select Virtual Machines
    3.	Choose:
        o	Region (e.g., Central India)
        o	OS (Linux/Windows)
        o	VM Size (e.g., B1s)
        o	Hours per month
        o	Storage type and amount
    4.	It shows the estimated monthly cost\


LAB: VNET PEERING:
Step 1: Created Two Virtual Networks (VNets)
    -	az network vnet create --resource-group mamatha-rg --name mamatha-vnet-1 --address-prefixes 10.11.0.0/16
    -	az network vnet create --resource-group mamatha-rg --name mamatha-vnet-2 --address-prefixes 10.12.0.0/16
Step 2: Created Subnets in Each VNet
    -	az network vnet subnet create --resource-group mamatha-rg --vnet-name mamatha-vnet-1 --name mamatha-sub1 --address-prefix 10.11.0.0/24
    -	az network vnet subnet create --resource-group mamatha-rg --vnet-name mamatha-vnet-2 --name mamatha-sub2 --address-prefix 10.12.0.0/24
Step 3: Created Two VM’s 
    - az vm create --resource-group mamatha-rg  --name mamatha-vm-1 --location eastus --image "Ubuntu2204" --size Standard_B1s --vnet-name mamatha-vnet-1 --subnet        mamatha-sub1 --admin-username mamatha --admin-password 'mamathaeudulakanti@24'
    - az vm create --resource-group mamatha-rg --name mamatha-vm-2 --location eastus --image "Ubuntu2204" --size Standard_B1s --vnet-name mamatha-vnet-2 --subnet         mamatha-sub2 --admin-username mamatha-1--admin-password 'mamathaeudulakanti@24'
Step 4: Two Networks Security Groups will be created for two VM’s.
Step 5: For both NSG’s allow ICMP protocol for the purpose of communication .
Step 6: We will create peering for the vnet1-vnet2 and vnet2-vnet 1
    - az network vnet peering create --name VNet-1-to-VNet-2 --resource-group mamatha-rg --vnet-name mamatha-vnet-1 --remote-vnet mamatha-vnet-2 --allow-vnet-access
    - az network vnet peering create --name VNet-2-to-VNet-1 --resource-group mamatha-rg --vnet-name mamatha-vnet-2 --remote-vnet mamatha-vnet-1 --allow-vnet-access
Step 7 : To check whether peering has been done or not :
From Vm1: ping private ip of Vm2
    -	ping 10.12.0.4
In VM2: ping@private ip of Vm1
    -	ping 10.11.0.4


Task: Create a New User in Azure (Entra ID)
Step 1:
    - Go to Microsoft Entra ID (formerly Azure AD)
    - Click on “+ Add” → Select “User” → Choose “Create new user”
Step 2:
    Fill in all required details:
    •	User name
    •	Name
    •	Password settings (Auto-generated or custom)
Step 3:
    Optionally assign user to a group (e.g., DevOpsTeam, Admins, Developers)
Step 4:
    Click “Review + Create”
    Then click “Create” to finalize









